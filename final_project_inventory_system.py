# -*- coding: utf-8 -*-
"""G6 Final Project - Inventory System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1awODp6ITGPUyHG1mo_NcquWRWQzQydEI
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime

def generateID(name, category):
    name = name.strip()
    category = category.strip()
    return (category[0].upper() + category[-1].upper() + name[0].upper() + name[-1].upper() + str(len(name))[-1] + str(np.random.randint(10, 99)))
minQ = 0
data = {"Item ID": [],
        "Name": [],
        "Category":[],
        "Quantity":[]}

history = {"Date Time":[],
           "Item ID/Name":[],
           "Action":[],
           "Histype": [],}

def add_to_history(item,action,histype):
  global history
  now = datetime.now()
  format_datetime = now.strftime("%Y-%m-%d %H:%M:%S")
  history["Date Time"].append(format_datetime)
  history["Item ID/Name"].append(item)
  history["Action"].append(action)
  history["Histype"].append(histype)


inventoryDF = pd.DataFrame(data)
inventoryDF["Quantity"] = inventoryDF["Quantity"].astype(int)
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
#____________________________________________________________________________________________________

def menu0():
  low_stock_display = ""
  if not inventoryDF.empty:
    lowstockcount = len(inventoryDF[inventoryDF["Quantity"] <= minQ])
    low_stock_display = "\nLow Stock Alert: " + str(lowstockcount) + " items below threshold \n"
  while True:
    decision = input(f"""
_______________________________
      Welcome to InvEase
            Menu

1 - Inventory
2 - Find Item
3 - Restock/Add Item
4 - Reduce/Delete Item
5 - Edit Item
6 - Inventory History
7 - Graph Inventory
8 - Settings
{low_stock_display}
E - End/Exit Program

  Input: """).strip().upper()

    if decision in ['1','2','3','4','5','6','7','8','E']:
      return decision
    else:
      print('SYSTEM: Invalid Input. Try Again')

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

def inventory1():
  global inventoryDF, minQ
  if inventoryDF.empty:
    print("SYSTEM: Inventory is empty. Please add a Item")
    return
  print(f"""
______________________________________________________________________
Inventory:
{inventoryDF.to_string(index=False)}""")

  while True:
    choice = input(f"""
1 - Sort by Item ID
2 - Sort by Name
3 - Sort by Category
4 - Sort by Quantity
5 - Sort by Low Quantity
6 - Edit Item

R - Return to menu

 Input: """).strip().upper()

    if choice == "1":
      print(f"""
______________________________________________________________________
Sorted by Item ID:
{inventoryDF.sort_values(by="Item ID").to_string(index=False)}""")
      input("\n Press Enter to Continue: ")

    elif choice == "2":
      print(f"""
______________________________________________________________________
Sorted by Name:
{inventoryDF.sort_values(by="Name").to_string(index=False)}""")
      input("\n Press Enter to Continue: ")

    elif choice == "3":
      print(f"""1
______________________________________________________________________
Sorted by Category:
{inventoryDF.sort_values(by="Category").to_string(index=False)}""")
      input("\n Press Enter to Continue: ")

    elif choice == "4":
      print(f"""
______________________________________________________________________
Sorted by Quantity:
{inventoryDF.sort_values(by="Quantity").to_string(index=False)}""")
      input("\n Press Enter to Continue: ")

    elif choice == "5":
      if inventoryDF[inventoryDF.Quantity <= minQ].empty:
        print("SYSTEM: No Item below low quantity threshold.")
      else:
        print(f"""
______________________________________________________________________
Sorted by Low Quantity:
{inventoryDF[inventoryDF.Quantity <= minQ].to_string(index=False)}""")
        input("\n Press Enter to Continue: ")

    elif choice == "6":
      editItem5()
      return

    elif choice == "R":
      return

    else:
      print('SYSTEM: Invalid Input. Try Again')

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

def findItem2():
  global inventoryDF
  while True:
    if inventoryDF.empty:
      print("SYSTEM: Inventory is empty. Please add a Item")
      return
    search = input("""
_______________________________
           Find Item
Note:
R - Return to Menu

  Enter Item ID/Name: """).strip().upper()

    if search == "R":
      break
    matchesDF = inventoryDF[inventoryDF["Item ID"].str.upper().str.contains(search) | inventoryDF["Name"].str.upper().str.contains(search)]
    if matchesDF.empty:
      print("SYSTEM: Please enter a valid ID or name. Try Again")
      continue
    else:
      print(f"""
______________________________________________________________________
Matching Items:
{matchesDF.to_string(index=False)} """)

      while True:
        choice = input ("\nR - Return to Menu \nInput: ")
        if choice == "R":
          return
        else:
          print('SYSTEM: Invalid Input. Try Again')

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

def restockAddItem3():
  global inventoryDF, history
  while True:
    choice = input("""
_______________________________
       Restock/Add Item

1 - Restock Item
2 - Add New Item
R - Return to Menu

  Input: """).upper()

# 1 - Restock Item
    if choice == '1':
      if inventoryDF.empty:
        print("SYSTEM: Inventory is empty. Please add a Item")
        return
      while True: #name input loop
        nameInput = input("""
_______________________________
         Restock Item
Note:
R - Return to Menu
I - Show Inventory

  Enter Item ID/Name: """)

        if nameInput == 'R':
          return
        elif nameInput == 'I':
          print(f"""
______________________________________________________________________
Inventory:
{inventoryDF.to_string(index=False)}""")
          continue
        try:
          nameMatch = inventoryDF[(inventoryDF["Item ID"] == nameInput) | (inventoryDF["Name"] == nameInput)]
          if nameMatch.empty:
            print("SYSTEM: Please enter a valid ID or name. Try Again")
          else:
            targetIndex = nameMatch.index[0]
            break
        except:
          print("SYSTEM: Inventory is empty. Please add a Item")
          return

      while True: #restock input loop
        restockInput = (input("""
_______________________________
         Restock Item
Note:
R - Return to Menu
I - Show Inventory

  Enter Restock Quantity: """)).upper()

        if restockInput == 'R':
          return
        elif restockInput == 'I':
          print(f"""
______________________________________________________________________
Inventory:
{inventoryDF.loc[[targetIndex]].to_string(index=False)}""")

          continue
        try:
          quantity = int(restockInput)
          if quantity > 0:
            break
          else:
            print("SYSTEM: Quantity must be a positive number. Try Again")
        except ValueError:
          print("SYSTEM: Invalid Input. Try Again")
      sampleDF = inventoryDF.copy()
      sampleDF.at[targetIndex, 'Quantity'] += quantity

      while True: # confirmation loop
        choice = input(f"""
______________________________________________________________________
Updated Inventory:
{sampleDF.loc[[targetIndex]].to_string(index=False)}
_______________________________
         Restock Item

1 - Confirm
2 - Cancel/Return

  Input: """)
        if choice == '1':
          item = inventoryDF.at[targetIndex, 'Item ID'] + "/" + inventoryDF.at[targetIndex, 'Name']
          action = f"Quantity - {inventoryDF.at[targetIndex, 'Quantity']} â†’ {sampleDF.at[targetIndex, 'Quantity']}"
          histype = "Restock Item"
          add_to_history(item,action,histype)
          inventoryDF.at[targetIndex, 'Quantity'] += quantity
          print("Item successfully restocked in Inventory")
          return
        elif choice == '2':
          return
        else:
          print("SYSTEM: Invalid Input. Try Again")


#
## 2 - Add New Item
    elif choice == '2':
      while True: # name input loop
        nameInput = input("""
_______________________________
         Restock Item
Note:
R - Return to Menu

Enter new Item Name : """)
        if nameInput.upper() == 'R':
          return
        elif inventoryDF.empty:
          break
        elif inventoryDF[inventoryDF["Name"].str.upper() == nameInput.strip().upper()].empty:
          break
        else:
          print("SYSTEM: Item name already exist. Try Again")


      while True: # categort input loop
        categoryInput = input("""
_______________________________
         Add New Item
Note:
R - Return to Menu

Enter new Item Category: """)
        if categoryInput.upper() == 'R':
          return
        elif inventoryDF.empty:
          break
        elif not inventoryDF.empty:
          categoryMatch = inventoryDF[inventoryDF["Category"].str.upper() == categoryInput.strip().upper()]
          if not inventoryDF[inventoryDF["Category"] == categoryInput].empty: # if input(case sentitive) not empty >> quantity | MEANING, THE INPUT EXACTLY MATCHES A EXISTING CATEGORY.
            break
          elif inventoryDF[inventoryDF["Category"].str.upper() == categoryInput.strip().upper()].empty: # if input(not case sentitve) is empty >> quantity | MEANING, THE INPUT IS NEW AND DOES NOT CURRENTLY EXIST IN THE CATEGORY.
            break
          else: # | MEANING, THE INPUT MATCHEST A EXISITING CATEGORY IN A NON CASE SENSITIVE FORM.
            categoryExist = categoryMatch["Category"].values[0]
            while True:
              choice = input(f"""
_______________________________
         Add New Item
The category input "{categoryInput}" already exist as "{categoryExist}"

1 - Use existing category
2 - Use entered category anyway
3 - Enter a different category
R - Return

  Input: """).upper()
              if choice == 'R':
                return
              elif choice == '1':
                categoryInput = categoryExist
                break
              elif choice in ['2','3']:
                break
              else:
                print("SYSTEM: Invalid Input. Try Again")
          if choice in ['1','2']:
            break

      while True: #quantity input loop
        quantityInput = input("""
_______________________________
         Add New Item
Note:
R - Return

  Enter new Item Quantity: """)
        if quantityInput.upper() == 'R':
          return
        try:
          quantity = int(quantityInput)
          if quantity >= 0:
            break
        except ValueError:
          print("SYSTEM: Invalid Input. Try Again")
      id = generateID(nameInput,categoryInput)
      while True: #Confirmation loop
        inputData = {
          "Item ID": [id],
          "Name": [nameInput],
          "Category": [categoryInput],
          "Quantity": [quantity]
        }
        sampleDF = pd.DataFrame(inputData)
        choice = input(f"""
______________________________________________________________________
Summary:
{sampleDF.to_string(index=False)}
_______________________________
         Add New Item

1 - Confirm
2 - Cancel/Return

  Input: """)
        if choice == '1':
          item = id + "/" + nameInput
          action = f"Add New Item - Category: {categoryInput} | Quantity â†’ {quantity}"
          histype = "Add New Item"
          add_to_history(item,action,histype)
          inventoryDF.loc[len(inventoryDF.index)] = [id,nameInput,categoryInput,quantity]
          print("Item Successfully added to Inventory")
          return
        elif choice == '2':
          return
        else:
          print("SYSTEM: Invalid Input. Try Again")
##
### R - Return to menu
    elif choice == 'R':
      return
    else:
      print('SYSTEM: Invalid Input. Try Again')
###

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

def reduceDeleteItem4():
  print('Reduce/Delete Item')
  global inventoryDF, minQ
  while True:
    if inventoryDF.empty:
      print("SYSTEM: Inventory is empty. Please add a Item")
      return
    choice = input("""
_______________________________
       Reduce/Delete Item

1 - Reduce Item
2 - Delete Item
R - Return to Menu

  Input: """).upper()

# 1 - Reduce Item
    if choice == '1':
      if inventoryDF.empty:
        print("SYSTEM: Inventory is empty. Please add a Item")
        return
      while True: #name input loop
        nameInput = input("""
_______________________________
          Reduce Item
Note:
R - Return to Menu
I - Show Inventory

  Enter Item ID/Name: """)

        if nameInput == 'R':
          return
        elif nameInput == 'I':
          print(f"""
______________________________________________________________________
Inventory:
{inventoryDF.to_string(index=False)}""")
          continue
        try:
          nameMatch = inventoryDF[(inventoryDF["Item ID"] == nameInput) | (inventoryDF["Name"] == nameInput)]
          if nameMatch.empty:
            print("SYSTEM: Please enter a valid ID or name. Try Again")
          else:
            targetIndex = nameMatch.index[0]
            break
        except:
          print("SYSTEM: Inventory is empty. Please add a Item")
          return

      while True: #reduce input loop
        reduceInput = (input("""
_______________________________
          Reduce Item
Note:
R - Return to Menu
I - Show Inventory

  Enter Quantity to Reduce: """)).upper()

        if reduceInput == 'R':
          return
        elif reduceInput == 'I':
          print(f"""
______________________________________________________________________
Inventory:
{inventoryDF.loc[[targetIndex]].to_string(index=False)}""")

          continue
        sampleDF = inventoryDF.copy()
        try:
          quantity = int(reduceInput)
          if quantity < 0:
            print("SYSTEM: Quantity cannot be negative. Try Again")
          elif int(sampleDF.at[targetIndex, 'Quantity']) < quantity:
            print(f"SYSTEM : You entered {quantity}, but only {sampleDF.at[targetIndex, 'Quantity']} are available. Try Again")
          else:
            sampleDF.at[targetIndex, 'Quantity'] -= quantity
            break
        except ValueError:
          print("SYSTEM: Invalid Input. Try Again")

      while True: # confirmation loop
        minimumwarning = ""
        if int(sampleDF.at[targetIndex, 'Quantity']) < minQ:
          minimumwarning = "\nWarning: Quantity is below minimum threshold\n"
        choice = input(f"""
______________________________________________________________________
Updated Inventory:
{sampleDF.loc[[targetIndex]].to_string(index=False)}
_______________________________
         Reduce Item
{minimumwarning}
1 - Confirm
2 - Cancel/Return

  Input: """)
        if choice == '1':
          item = inventoryDF.at[targetIndex, 'Item ID'] + "/" + inventoryDF.at[targetIndex, 'Name']
          action = f"Quantity - {inventoryDF.at[targetIndex, 'Quantity']} â†’ {sampleDF.at[targetIndex, 'Quantity']}"
          histype = "Reduce Item"
          add_to_history(item,action,histype)
          inventoryDF.at[targetIndex, 'Quantity'] -= quantity #apply changes to main dataframe
          print("Item quantity successfully reduced from inventory.")
          return
        elif choice == '2':
          return
        else:
          print("SYSTEM: Invalid Input. Try Again")


    elif choice == '2':
      while True: #delete item loop
        nameInput = input("""
_______________________________
          Delete Item
Note:
R - Return to Menu
I - Show Inventory

  Enter Item ID/Name: """)

        if nameInput == 'R':
          return
        elif nameInput == 'I':
          print(f"""
______________________________________________________________________
Inventory:
{inventoryDF.to_string(index=False)}""")

          continue
        nameMatch = inventoryDF[(inventoryDF["Item ID"] == nameInput) | (inventoryDF["Name"] == nameInput)]
        if nameMatch.empty:
          print("SYSTEM: Please enter a valid ID or name. Try Again")
        else:
          targetIndex = nameMatch.index[0]
          break
      while True: # confirmation loop
        choice = input(f"""
______________________________________________________________________
Seleteced Inventory:
{inventoryDF.loc[[targetIndex]].to_string(index=False)}
_______________________________
         Delete Item

1 - Confirm
2 - Cancel/Return

  Input: """)

        if choice == '1':
          item = inventoryDF.at[targetIndex, 'Item ID'] + "/" + inventoryDF.at[targetIndex, 'Name']
          action = "Item Deleted"
          histype = "Delete Item"
          add_to_history(item,action,histype)
          inventoryDF.drop(index=targetIndex, inplace=True) #apply changes to main dataframe
          print("Item successfully deleted from inventory.")
          return
        elif choice == '2':
          return
        else:
          print("SYSTEM: Invalid Input. Try Again")
    elif choice == "R":
      return
    else:
      print('SYSTEM: Invalid Input. Try Again')
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

def editItem5():
  while True:
    if inventoryDF.empty:
      print("SYSTEM: Inventory is empty. Please add a Item")
      return
    nameInput = input("""
_______________________________
          Edit Item
Note:
R - Return to Menu
I - Inventory

  Enter Item ID/Name: """)
    if nameInput == 'R':
      return
    elif nameInput == 'I':
      print(f"""
______________________________________________________________________
Inventory:
{inventoryDF.to_string(index=False)}""")
      continue

    nameMatch = inventoryDF[(inventoryDF["Item ID"] == nameInput) | (inventoryDF["Name"] == nameInput)]
    if nameMatch.empty:
      print("SYSTEM: Please enter a valid ID or name. Try Again")
    else:
      targetIndex = nameMatch.index[0]
      break
  sampleDF = inventoryDF.copy()
  while True:
    print(f"""
______________________________________________________________________
Selected Inventory:
{sampleDF.loc[[targetIndex]].to_string(index=False)}""")
    editInput = input("""
_______________________________
          Edit Item

Edit Options:
1 - Name
2 - Category
3 - Quantity
4 - Save Changes
R - Return to Menu

  Input: """).strip().upper()

    if editInput == "1": #Edit Name Loop
      while True:
        editname = input("""
_______________________________
          Edit Item
Note:
R - Return

  Enter new Name: """)

        if not sampleDF[(sampleDF["Name"] == editname)].empty:
          print("SYSTEM: Item name already exist. Try Again")

        elif not sampleDF[sampleDF["Name"].str.strip().str.upper() == editname.strip().upper()].empty:
          nameExist = sampleDF[sampleDF["Name"].str.strip().str.upper() == editname.upper()].iloc[0]["Name"]
          while True:
            choice = input(f"""
_______________________________
          Edit Item
The name "{editname}" already exists as "{nameExist}".

1 - Use entered name anyway
2 - Enter a different name
R - Return to Menu

  Input: """).strip().upper()

            if choice == "1":
              print("Name Updated.")
              break
            elif choice == "2":
              break
            elif choice == "R":
              return
            else:
              print('SYSTEM: Invalid Input. Try Again')

          if choice == "1":
            break
        else:
          sampleDF.at[targetIndex, 'Name'] = editname
          print("Name Updated.")
          break

    elif editInput == "2": #Edit Category Loop
      while True:
        editcategory = input("""
_______________________________
          Edit Item
Note:
R - Return to Menu

  Enter new Category: """)

        if editcategory == "R":
          return
        elif not inventoryDF[inventoryDF["Category"].str.strip() == editcategory.strip()].empty:
          sampleDF.at[targetIndex, 'Category'] = editcategory
          print("Category Updated.")
          break
        elif inventoryDF[inventoryDF["Category"].str.strip().str.upper() == editcategory.strip().upper()].empty:
          sampleDF.at[targetIndex, 'Category'] = editcategory
          print("Category Updated.")
          break
        else:
          categoryMatch = inventoryDF[inventoryDF["Category"].str.strip().str.upper() == editcategory.strip().upper()]
          categoryExist = categoryMatch["Category"].values[0]
          while True:
            choice = input(f"""
_______________________________
          Edit Item
The category input "{editcategory}" already exists as "{categoryExist}".

1 - Use existing category
2 - Use entered category anyways
3 - Enter a different name
R - Return to Menu

  Input: """)
            if choice == "R":
              return
            elif choice == "1":
              editcategory = categoryExist
              break
            elif choice in ["2","3"]:
              break
            else:
              print("SYSTEM: Invalid Input. Try Again")
          if choice in ['1','2']:
            print("Category Updated.")
            sampleDF.at[targetIndex, 'Category'] = editcategory
            break

    elif editInput == "3": #Edit Quantity Loop
      while True:
        editquantity = input("""
_______________________________
          Edit Item
Note:
R - Return to Menu

  Enter new Quantity: """)
        if editquantity.upper() == 'R':
          return
        try:
          editquantity = int(editquantity)
          if editquantity >= 0:
            sampleDF.at[targetIndex, 'Quantity'] = editquantity
            print("Quantity Updated.")
            break
          else:
            print("SYSTEM: Quantity must be a positive number. Try Again")
        except ValueError:
          print("SYSTEM: Invalid Input. Try Again")



    elif editInput == "4":
      print(f"""
______________________________________________________________________
Before:
{inventoryDF.loc[[targetIndex]].to_string(index=False)}

After:
{sampleDF.loc[[targetIndex]].to_string(index=False)}""")

      confirm = input("""
_______________________________
Confirm Save?

1 - Confirm and Save Changes
2 - Go back to Edit Options
R - Return to Menu

  Input: """).strip().upper()
      if confirm == "1":
        item = inventoryDF.at[targetIndex, 'Item ID'] + "/" + inventoryDF.at[targetIndex, 'Name']
        action = f"Edit - Name: {inventoryDF.at[targetIndex, 'Name']} â†’ {sampleDF.at[targetIndex,'Name']} | Catergory: {inventoryDF.at[targetIndex, 'Category']} â†’ {sampleDF.at[targetIndex,'Category']} | Quantity: {inventoryDF.at[targetIndex, 'Quantity']} â†’ {sampleDF.at[targetIndex,'Quantity']}"
        histype = "Item Edit"
        add_to_history(item,action,histype)
        for column in ["Name", "Category", "Quantity"]:
          inventoryDF.at[targetIndex, column] = sampleDF.at[targetIndex, column]
        print("Changes saved to inventory.")
        return
      elif confirm == "2":
        continue
      elif confirm == "R":
        print("SYSTEM: Changes discarded.")
        return
      else:
        print("SYSTEM: Invalid Input. Returning to edit menu.")
    elif editInput == "R":
      return
    else:
      print("SYSTEM: Please enter a valid ID or name. Try Again")


#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

def inventoryHistory6():
  global inventoryDF, history
  if len(history["Date Time"]) == 0:
    print("SYSTEM: Inventory History Log is Empty.")
    return
  while True:
    search = input("""
_______________________________
    Inventory History
Note:
R - Return to Menu
I - Inventory

- Enter Item ID
- Leave blank to show all

  Input: """).strip()
    if search == "R":
      return
    elif search == "I":
      print(f"""
______________________________________________________________________
Inventory:
{inventoryDF.to_string(index=False)}""")
      continue

    found = 0
    for i in range(len(history["Date Time"])-1,-1,-1):
      if search == "" or search in history["Item ID/Name"][i]:
        found = 1
        print(f"""______________________________________________________________________
{history["Histype"][i]}
    Date & Time : {history["Date Time"][i]}
    Item ID/Name: {history["Item ID/Name"][i]}
    Action      : {history["Action"][i]}""")
        print("______________________________________________________________________")

    if found == 0:
      print("SYSTEM: No matching item history found. Try Again")
    else:
      input("Press enter to return: ")
      return





#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

def graphInventory7():
  global inventoryDF, history
  while True:
    if inventoryDF.empty:
      print("SYSTEM: Inventory is empty. Please add a Item")
      return
    choice = input("""
_______________________________
        Graph Inventory

1 - Show Total Quantity per Inventory Category (Bar Graph)
2 - Show Quantity of Items within a Specific Category (Bar Graph)
3 - Show Quantity History of an Item (Line Graph)

R - Return to Menu

  Input: """)
    if choice == "1":
      category_totals = inventoryDF.groupby("Category")["Quantity"].sum()
      category_totals.plot(kind='bar', title="Total Quantity per Category")
      plt.ylabel("Quantity")
      plt.xlabel("Category")
      plt.tight_layout()
      plt.show(block=False)
      plt.pause(0.001)
      input("Press Enter to continue: ")



    elif choice == "2":
      while True:
        category_input = input("""
_______________________________
        Graph Inventory
R - Return to Menu

Enter Category to graph: """).strip()
        filtered = inventoryDF[inventoryDF["Category"].str.strip().str.upper() == category_input.strip().upper()]
        if filtered.empty:
          print("SYSTEM: Category not found. Try Again")
        else:
          filtered.plot(kind= 'bar',x="Name", y="Quantity", title=f"Items in {category_input}")
          plt.ylabel("Quantity")
          plt.xlabel("Item Name")
          plt.legend(handles=[])
          plt.show(block=False)
          plt.pause(0.001)
          input("Press Enter to continue: ")
          break


    elif choice == "3":
      while True:
        idInput = input("""
_______________________________
          Graph Item
Note:
R - Return to Menu
I - Inventory

  Enter Item ID: """)
        if idInput == 'R':
          return
        elif idInput == 'I':
          print(f"""
______________________________________________________________________
Inventory:
{inventoryDF.to_string(index=False)}""")
          continue

        idMatch = inventoryDF[(inventoryDF["Item ID"] == idInput)]
        if idMatch.empty:
          print("SYSTEM: Please enter a valid ID or name. Try Again")
        else:
          x = []
          y = []
          for i in range(len(history['Date Time'])):
            item = history["Item ID/Name"][i]
            if idInput in item:
              action = history["Action"][i]
            # Extract the last quantity number after the last "â†’"
              if "â†’" in action:
                try:
                  quantity_str = action.split("â†’")[-1].strip()
                  quantity = int(quantity_str)
                  x.append(history['Date Time'][i])
                  y.append(quantity)
                except ValueError:
                  continue  # Skip if conversion fails
          if not x:
            print("SYSTEM: No quantity history data found for this item.")
          else:
            plt.plot(x, y, marker='o')
            plt.xlabel("Date and Time")
            plt.ylabel("Quantity")
            plt.title(f"History of Item ID: {idInput}")
            plt.xticks(rotation=90)
            plt.show(block=False)
            plt.pause(0.001)
            input("Press Enter to continue: ")
            break
    elif choice == "R":
      return
    else:
      print('SYSTEM: Invalid Input. Try Again')
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def settings8():
  global inventoryDF, history, minQ
  while True:
    choice = input(f"""
_______________________________
          Settings
1 - Set Low Quantity Threshold
2 - Import CSV File
3 - Clear Inventory
4 - Clear History
R - Return to Menu

  Input: """)

    if choice == "1":
      while True:
        minimuminput = input(f"""
_______________________________
 Low Quantity Threshold Alert
Note:
R - Return to Menu

Current Threshold: {minQ}

Enter Low Quantity Threshold: """)
        try:
          if minimuminput == "R":
            return
          elif int(minimuminput) < 0:
            print("SYSTEM: Threshold cannot be negative. Try Again")
          elif int(minimuminput) >= 0:
            minQ = int(minimuminput)
            print("SYSTEM: Threshold Successfully Updated")
            return
          else:
            print("SYSTEM: Invalid Input. Try Again")
        except:
            print("SYSTEM: Threshold must a Integer. Try Again")


    elif choice == "2":
      while True:
        try:
          filename = input("""
_______________________________
        Import CSV File
Note:
R - Return to Menu

  Enter CSV File Name: """)
          if filename == "R":
            return
          else:
            importedDF = pd.read_csv(f"{filename}.csv")
            idHolder = []

            for i, row in importedDF.iterrows(): #Generate the Item ID
              name = row["Name"]
              category = row["Category"]
              item_id = generateID(name, category)
              idHolder.append(item_id)

            importedDF["Item ID"] = idHolder #Add a column for Geneted Item ID
            importedDF["Quantity"] = importedDF["Quantity"].astype(int)
            importedDF = importedDF[["Item ID", "Name", "Category", "Quantity"]] # Rearrage columns
            inventoryDF = pd.concat([inventoryDF, importedDF], ignore_index=True) #combine the dataframes into one or Append the imported dataframe to the main dataframe(InvertoryDF)

            for i, row in importedDF.iterrows(): # Add to history
              item = row["Item ID"] + "/" + row["Name"]
              action = f"Imported from CSV - Category: {row['Category']} | Quantity â†’ {row['Quantity']}"
              histype = "CSV Imported Item"
              add_to_history(item, action, histype)

            print("SYSTEM: Data Successfully Imported.")
            return

        except:
          print(f"SYSTEM: '{filename}' not found. Make sure the file is in the same folder.")

    elif choice == "3":
      if inventoryDF.empty:
        print("SYSTEM: Inventory is empty. Please add a Item")
        return
      while True:
        choice = input("""
_______________________________
       Clear Inventory

          WARNING:
    This will permanently
  delete all items from your
    inventory list. This
  action cannot be undone.

1 - Clear Inventory
R - Return to Menu

  Input: """)
        if choice == "R":
          return

        elif choice == "1":
          while True:
            decision = input(f"""
_______________________________
        Clear Inventory
{len(inventoryDF)} Items
will be permanently deleted.

C - Confirm
R - Return to Menu

  Input: """)
            if decision == "C":
              inventoryDF = pd.DataFrame(columns=["Item ID", "Name", "Category", "Quantity"])
              print(f"SYSTEM: Succefully Cleared Inventory.")
              return
            elif decision == "R":
              return
            else:
              print('SYSTEM: Invalid Input. Try Again')
        else:
          print('SYSTEM: Invalid Input. Try Again')

    elif choice == "4":
      while True:
        choice = input("""
_______________________________
       Clear History

          WARNING:
   This will permanently
  delete all history logs.
   This action cannot be
           undone.

1 - Clear History
R - Return to Menu

  Input: """)
        if choice == "R":
          return
        elif choice =="1":
          while True:
            decision = input(f"""
_______________________________
        Clear History
{len(history["Date Time"])} History Log
will be permanently deleted.

C - Confirm
R - Return to Menu

  Input: """)
            if decision == "R":
              return
            elif decision == "C":
              history = {"Date Time":[],
           "Item ID/Name":[],
           "Action":[],
           "Histype": [],}
              print(f"SYSTEM: Succefully Cleared History.")
              return
            else:
              print('SYSTEM: Invalid Input. Try Again')
          else:
            print('SYSTEM: Invalid Input. Try Again')


    elif choice == "R":
      return
    else:
      print("SYSTEM: Invalid Input. Try Again")


#____________________________________________________________________________________________________
#MAIN LOOP

while True:
  key = menu0()
  if key == '1':
    inventory1()
  elif key == '2':
    findItem2()
  elif key == '3':
    restockAddItem3()
  elif key == '4':
    reduceDeleteItem4()
  elif key == '5':
    editItem5()
  elif key == '6':
    inventoryHistory6()
  elif key == '7':
    graphInventory7()
  elif key == '8':
    settings8()
  else:
    print('========== Program Terminated ==========')
    break